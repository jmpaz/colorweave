```py
# ruff: noqa: E402
```

## Scheme definition

### Manually define a colorscheme
```python
from c_weave.theme import Scheme, Variant

# Initialize an empty theme
nord = Scheme(name='nord')

# Create a variant
nord_dark = nord.add_variant(
  Variant(name='dark', colors = [
    ('background', '#2E3440'),
    ('foreground', '#D8DEE9'),
    ('color0', '#3B4252'),
    ('color1', '#BF616A'),
    ('color2', '#A3BE8C'),
    ('color3', '#EBCB8B'),
    ('color4', '#81A1C1'),
    ('color5', '#B48EAD'),
    ('color6', '#88C0D0'),
    ('color7', '#E5E9F0'),
    ('color8', '#4C566A'),
    ('color9', '#BF616A'),
    ('color10', '#A3BE8C'),
    ('color11', '#EBCB8B'),
    ('color12', '#81A1C1'),
    ('color13', '#B48EAD'),
    ('color14', '#8FBCBB'),
    ('color15', '#ECEFF4')
]))

# Apply the theme
nord_dark.apply()
```


## Palette generation
### Extract colors from an image

```python
from c_weave.utils.color import infer_palette

image_path = "outputs/comfy/20240302-074601_ca3a0bb3-5ac0-4653-8a5e-b63f6088fddb.png"
colors = infer_palette(image_path, n=4)
print(colors)
```

## Wallpaper generation

### Generate a wallpaper from a palette

```python
# Get readable color names
import webcolors
from webcolors import hex_to_rgb

def closest_color(requested_color):
    min_colors = {}
    for key, name in webcolors.CSS3_HEX_TO_NAMES.items():
        r_c, g_c, b_c = webcolors.hex_to_rgb(key)
        rd = (r_c - requested_color[0]) ** 2
        gd = (g_c - requested_color[1]) ** 2
        bd = (b_c - requested_color[2]) ** 2
        min_colors[(rd + gd + bd)] = name
    return min_colors[min(min_colors.keys())]


def get_color_name(hex_color):
    try:
        # Direct conversion from hex to name if exact match is found
        return webcolors.hex_to_name(hex_color)
    except ValueError:
        # Calculate closest color name if no exact match is found
        return closest_color(hex_to_rgb(hex_color))

print(colors)
named_colors = [get_color_name(hex_color) for hex_color in colors]
colors_str = ", ".join(named_colors)
print(colors_str)
```

```py
# Generate the wallpaper
from c_weave.generate import generate_wallpaper

wallpaper = generate_wallpaper(colors_str)
```

