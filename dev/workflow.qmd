```py
# ruff: noqa: E402
```


## Palette generation

### Extract colors from an image
```python
from c_weave.utils.color import infer_palette, estimate_colors

image_path = "data/samples/image.png"
# image_path = "data/samples/fine_wind.jpg"

colors = infer_palette(image_path, n=6)
named_colors = estimate_colors(colors)

print(colors)
print(named_colors)
```

### Pass colors to Claude to generate a palette

Create client
```python
from c_weave.design import generate_palette

output = generate_palette(colors, "sonnet")
print(output)
```


#### Parse the response
```py
from c_weave.utils.color import parse_output

# optionally load from a file
# output = open("data/samples/lush.md").read()

parsed_colors = parse_output(output)
print(parsed_colors)

# write to file # with open("data/samples/lush.txt", "w") as f:
#   f.write(str(parsed_colors))

```


## Wallpaper generation

### Generate a wallpaper from a palette
```python
from c_weave.generate import generate_wallpaper

# prepare colors_str to be injected into prompt
colors_str = ", ".join(named_colors)
print(colors_str)

wallpaper = generate_wallpaper(colors_str)
```

```py
from c_weave.generate import upscale

wallpaper_upscaled = upscale(wallpaper)  # takes much longer than the initial generation
```


## Scheme definition

### Manually define a colorscheme
```python
from c_weave.theme import Scheme, Variant

# Initialize an empty theme
nord = Scheme(name='nord')
# Create a variant
nord_dark = nord.add_variant(
  Variant(name='dark', colors = [
    ('background', '#2E3440'),
    ('foreground', '#D8DEE9'),
    ('color0', '#3B4252'),
    ('color1', '#BF616A'),
    ('color2', '#A3BE8C'),
    ('color3', '#EBCB8B'),
    ('color4', '#81A1C1'),
    ('color5', '#B48EAD'),
    ('color6', '#88C0D0'),
    ('color7', '#E5E9F0'),
    ('color8', '#4C566A'),
    ('color9', '#BF616A'),
    ('color10', '#A3BE8C'),
    ('color11', '#EBCB8B'),
    ('color12', '#81A1C1'),
    ('color13', '#B48EAD'),
    ('color14', '#8FBCBB'),
    ('color15', '#ECEFF4')
]))

# Apply the theme
nord_dark.apply()
```

### Apply Claude-generated colorscheme
```python
from c_weave.utils.color import parse_output, list_to_scheme
from c_weave.theme import Scheme, Variant

colors = list_to_scheme(parsed_colors)

# load from file
# colors = list_to_scheme(parse_output(open("data/samples/lush.txt").read()))

lush = Scheme(name='lush')
lush_dark = lush.add_variant(Variant(name='dark', colors=colors))
lush_dark.apply()

```
