```py
# ruff: noqa: E402
```

## Scheme definition

### Manually define a colorscheme
```python
from c_weave.theme import Scheme, Variant

# Initialize an empty theme
nord = Scheme(name='nord')
# Create a variant
nord_dark = nord.add_variant(
  Variant(name='dark', colors = [
    ('background', '#2E3440'),
    ('foreground', '#D8DEE9'),
    ('color0', '#3B4252'),
    ('color1', '#BF616A'),
    ('color2', '#A3BE8C'),
    ('color3', '#EBCB8B'),
    ('color4', '#81A1C1'),
    ('color5', '#B48EAD'),
    ('color6', '#88C0D0'),
    ('color7', '#E5E9F0'),
    ('color8', '#4C566A'),
    ('color9', '#BF616A'),
    ('color10', '#A3BE8C'),
    ('color11', '#EBCB8B'),
    ('color12', '#81A1C1'),
    ('color13', '#B48EAD'),
    ('color14', '#8FBCBB'),
    ('color15', '#ECEFF4')
]))

# Apply the theme
nord_dark.apply()
```


## Palette generation

### Extract colors from an image
```python
from c_weave.utils.color import infer_palette, estimate_colors

image_path = "data/samples/image.png"

colors = infer_palette(image_path, n=6)
named_colors = estimate_colors(colors)

print(colors)
print(named_colors)
```

### Pass colors to Claude Sonnet to generate a palette

Create client
```python
import os
from anthropic import AnthropicBedrock

client = AnthropicBedrock(
    aws_access_key=os.getenv("AWS_ACCESS_KEY_ID"),
    aws_secret_key=os.getenv("AWS_SECRET_ACCESS_KEY"),
    # aws_session_token="<session_token>",
    aws_region="us-east-1",
)
```

```py
# load initializing prompt
prompt = open("data/prompts/palette_design/base.md").read()

# prepare a command to append to the prompt
colors_str = list(zip(colors, named_colors))
command = f"<cmd>/design [{colors_str}]</cmd>"

## example: `<cmd>/design ['#f6efd9 (cornsilk)', '#6e7e88 (slategray)', '#2d506f (darkslateblue)', '#c9cdbe (lightgray)', '#efe0c0 (wheat)', '#a4aaa4 (darkgray)']</cmd>`

messages = [
    {"role": "user", "content": prompt},
    {"role": "assistant", "content": "Understood; awaiting command."},
    {"role": "user", "content": command}
]
output = client.messages.create(
    model="anthropic.claude-3-sonnet-20240229-v1:0",
    max_tokens=512,
    messages=messages
)

output.content
```

### Parse the response
```py
from c_weave.utils.color import parse_output

# optionally load from a file
output = open("outputs/colors/claude/lush.md").read()

parsed_colors = parse_output(output)
parsed_colors

```


## Wallpaper generation

### Generate a wallpaper from a palette
```python
from c_weave.generate import generate_wallpaper

# prepare colors_str to be injected into prompt
colors_str = ", ".join(named_colors)
print(colors_str)

wallpaper = generate_wallpaper(colors_str)
```

```py
from c_weave.generate import upscale

wallpaper_upscaled = upscale(wallpaper)  # takes much longer than the initial generation
```
