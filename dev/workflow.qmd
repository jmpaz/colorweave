## Workflow

### Class schema

```python
class ColorScheme:
    def __init__(self, name):
        self.name = name
        self.variants = {}

    def add_variant(self, variant):
        self.variants[variant.name] = variant

    def get_variant(self, variant_name):
        return self.variants.get(variant_name, None)

class SchemeVariant:
    def __init__(self, name, colors):
        self.name = name
        self.colors = dict(colors)

    def get_color(self, color_name):
        return self.colors.get(color_name, None)

class Wallpaper:
    def __init__(self, file, resolution=None, aspect_ratio=None):
        self.file = file
        self.resolution = resolution
        self.aspect_ratio = aspect_ratio

class Theme:
    def __init__(self, colorscheme, wallpaper, variant_name='base'):
        self.colorscheme = colorscheme
        self.wallpaper = wallpaper
        self.variant = self.colorscheme.get_variant(variant_name)
```

```py
nord_dark = SchemeVariant('dark', [
    ('background', '#2E3440'),
    ('foreground', '#D8DEE9'),
    ('color0', '#3B4252'),
    ('color1', '#BF616A'),
    ('color2', '#A3BE8C'),
    ('color3', '#EBCB8B'),
    ('color4', '#81A1C1'),
    ('color5', '#B48EAD'),
    ('color6', '#88C0D0'),
    ('color7', '#E5E9F0'),
    ('color8', '#4C566A'),
    ('color9', '#BF616A'),
    ('color10', '#A3BE8C'),
    ('color11', '#EBCB8B'),
    ('color12', '#81A1C1'),
    ('color13', '#B48EAD'),
    ('color14', '#8FBCBB'),
    ('color15', '#ECEFF4')
])

wallpaper = Wallpaper('nord_blue.png', resolution='3840x2160')

nord = ColorScheme('Nord')
nord.add_variant(nord_dark)

theme = Theme(colorscheme=nord, wallpaper=wallpaper, variant_name='dark')

print(f"colors 0-15: {', '.join(nord_dark.get_color(f'color{i}') for i in range(16))}")
print(f"Background, foreground: {nord_dark.get_color('background')}, {nord_dark.get_color('foreground')}")
print("Wallpaper resolution:", theme.wallpaper.resolution)
```


### Apply
```python
import json
import subprocess
import tempfile

def apply_colorscheme(scheme_variant, backend='wallust'):
    # Map the SchemeVariant colors to the pywal format
    pywal_scheme = {
        "special": {
            "background": scheme_variant.get_color('background'),
            "foreground": scheme_variant.get_color('foreground'),
            "cursor": scheme_variant.get_color('color1')
        },
        "colors": {f"color{i}": scheme_variant.get_color(f'color{i}') for i in range(16)}
    }

    # Convert the scheme to JSON
    with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as tmp:
        json.dump(pywal_scheme, tmp)
        tmp_path = tmp.name

    # Construct and run the subprocess call
    command = f"wallust cs {tmp_path} -f pywal" if backend == 'wallust' else ""
    try:
        subprocess.run(command, check=True, shell=True)
    except subprocess.CalledProcessError as e:
        print(f"Error applying colorscheme with {backend}: {e}")
```

```py
apply_colorscheme(nord_dark)
```
